services:
  backend:
    image: backend:dev
    container_name: ${BACKEND_NAME}
    hostname: ${BACKEND_HOST}
    restart: always
    ports:
      - "${BACKEND_PORT}:3000"
      - 9229:9229 # debug
    build:
      context: requirements/backend
    environment:
      NEST_PORT: 3000
      NEST_FRONT_URL: 'http://${TRANSC_HOST}:${FRONTEND_PORT}'
      NEST_INTRA_API_URL: '${TRANSC_INTRA_API_URL}'
      NEST_INTRA_REDIRECT_URI: 'http://${TRANSC_HOST}:${FRONTEND_PORT}/login'
      NEST_AUTH_MOCK: '${TRANSC_INTRA_MOCK}'
      NEST_INTRA_UID: '${TRANSC_INTRA_UID}'
      NEST_INTRA_SECRET: '${TRANSC_INTRA_SECRET}'
      NEST_COOKIE_SECRET: '${BACKEND_COOKIE_SECRET}'
      POSTGRES_HOST: '${POSTGRES_HOST}'
      POSTGRES_PORT: '${POSTGRES_PORT}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DATABASE}'
      FRONTEND_HOST: '${FRONTEND_HOST}'
    networks:
      - transc
    depends_on:
      - postgresql
    volumes:
      - backend:/backend/
    #stdin_open: true # docker run -i
    #tty: true        # docker run -t
    #profiles:
    #  - donotstart

  frontend:
    image: frontend:dev
    container_name: ${FRONTEND_NAME}
    hostname: ${FRONTEND_HOST}
      #user: "${UID}:${GID}"
    restart: always
    ports:
      - "${FRONTEND_PORT}:3030"
    build:
      context: requirements/frontend
    environment:
      VITE_PORT: '3030'
      NODE_ENV: '${FRONTEND_NODE_ENV}'
      VITE_BACKEND_URL: 'http://${TRANSC_HOST}:${BACKEND_PORT}'
      VITE_MOCK_LOGIN: '${TRANSC_INTRA_MOCK}'
      VITE_URL_42: '${TRANSC_INTRA_REDIRECT_URI}'
      BACKEND_HOST: '${BACKEND_HOST}'
    networks:
      - transc
    depends_on:
      - backend
    volumes:
      - frontend:/frontend/
    #stdin_open: true
    #tty: true
    #profiles:
    #  - donotstart

  postgresql:
    #image: postgres:15.2-alpine3.17
    image: postgresql:dev
    container_name: ${POSTGRES_NAME}
    hostname: ${POSTGRES_HOST}
    user: "${UID}:${GID}"
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    build:
      context: requirements/postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/db
      DB: '${POSTGRES_DATABASE}'
      #POSTGRES_DB: test_db
    networks:
      - transc
    volumes:
      - postgresql:/var/lib/postgresql/data
    #stdin_open: true # docker run -i
    #tty: true        # docker run -t
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root"]

  pgadmin:
    image: dpage/pgadmin4:7.0
    container_name: ${PGADMIN_NAME}
    hostname: ${PGADMIN_HOST}
    restart: always
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    networks:
      - transc
    volumes:
      - pgadmin:/var/lib/pgadmin
    profiles:
      - donotstart

networks:
  transc:
    name: transc

volumes:
  backend:
    name: transc-backend
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/src/requirements/backend/vol

  frontend:
    name: transc-frontend
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/src/requirements/frontend/vol

  postgresql:
    name: transc-postgresql
  #  driver: local
  #  driver_opts:
  #    o: bind
  #    type: none
  #    device: ${PWD}/src/requirements/postgresql/vol

  pgadmin:
    name: transc-pgadmin
  #  driver: local
  #  driver_opts:
  #    o: bind
  #    type: none
  #    device: ${PWD}/src/requirements/pgadmin/vol

